<?php

namespace PHPCensor\Plugin;

use PHPCensor\Builder;
use PHPCensor\Model\Build;
use PHPCensor\Model\BuildError;
use PHPCensor\Plugin;

/**
 * PHP CS Fixer - Works with the PHP Coding Standards Fixer for testing coding standards.
 *
 * @author Gabriel Baker <gabriel@autonomicpilot.co.uk>
 */
class PhpCsFixer extends Plugin
{
    protected $directory = null;
    protected $args      = '';

    protected $config    = false;
    protected $configs   = [
        '.php_cs',
        '.php_cs.dist',
    ];

    protected $errors = false;
    protected $reportErrors = false;
    protected $fileErrors = 'tmp_php-cs-fixer.log';

    /**
     * @return string
     */
    public static function pluginName()
    {
        return 'php_cs_fixer';
    }

    /**
     * {@inheritdoc}
     */
    public function __construct(Builder $builder, Build $build, array $options = [])
    {
        parent::__construct($builder, $build, $options);

        if (!empty($options['args'])) {
            $this->args = $options['args'];
        }

        if (isset($options['verbose']) && $options['verbose']) {
            $this->args .= ' --verbose';
        }

        if (isset($options['diff']) && $options['diff']) {
            $this->args .= ' --diff';
        }

        if (isset($options['rules']) && $options['rules']) {
            $this->args .= ' --rules=' . $options['rules'];
        }

        if (isset($options['config']) && $options['config']) {
            $this->config = true;
            $this->args   .= ' --config=' . $builder->interpolate($options['config']);
        }

        $this->directory = isset($options['directory'])
            ? $options['directory']
            : $this->builder->buildPath;

        if (isset($options['errors']) && $options['errors']) {
            $this->errors = true;
            $this->args .= ' --dry-run';

            if (isset($options['report-errors']) && $options['report-errors']) {
                $this->reportErrors = true;
            }

            $this->allowedWarnings = isset($options['allowed_warnings']) ? (int) $options['allowed_warnings'] : 0;
        }
    }

    /**
     * Run PHP CS Fixer.
     *
     * @return boolean
     */
    public function execute()
    {
        $directory = '';
        if (!empty($this->directory)) {
            $directory = $this->directory;
        }

        if (!$this->config) {
            foreach ($this->configs as $config) {
                if (file_exists($this->builder->buildPath . '/' . $config)) {
                    $this->config = true;
                    $this->args   .= ' --config=./' . $config;
                    break;
                }
            }
        }

        if (!$this->config && !$directory) {
            $directory = '.';
        }

        if ($this->errors) {
            $this->args .= ' > '.$this->fileErrors;
        }

        $phpCsFixer = $this->findBinary('php-cs-fixer');
        $cmd        = $phpCsFixer . ' fix ' . $directory . ' %s';
        $success    = $this->builder->executeCommand($cmd, $this->args);

        if ($this->errors && file_exists($this->builder->buildPath . '/' . $this->fileErrors)) {
            $warningCount = $this->processReport(file($this->builder->buildPath . '/' . $this->fileErrors));

            $this->build->storeMeta('phpcsfixer-warnings', $warningCount);

            if ($this->allowedWarnings != -1 && $warningCount > $this->allowedWarnings) {
                $success = false;
            }
        }


        return $success;
    }

    /**
     * Process the PHP CS Fixer report.
     *
     * @param array $listFiles
     *
     * @return int
     *
     * @throws \Exception
     */
    protected function processReport(array $listFiles)
    {
        if (count($listFiles) < 3) {
            $this->builder->log($listFiles);
            throw new \Exception('Could not process the report generated by PHP CS Fixer.');
        }

        $warnings = 0;

        foreach ($listFiles as $data) {
            $data = explode(') ', $data);

            if (!empty($data[1])) {
                if ($this->reportErrors) {
                    $this->build->reportError(
                        $this->builder,
                        'php_cs_fixer',
                        $data[1],
                        BuildError::SEVERITY_LOW
                    );
                }

                $warnings++;
            }
        }

        return $warnings;
    }
}
